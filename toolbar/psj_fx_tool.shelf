<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="psj_fx_tools" label="psj_fx_tools">
    <memberTool name="memory_clear"/>
    <memberTool name="center_pivot_extract"/>
    <memberTool name="prim_spliter"/>
    <memberTool name="point_spliter"/>
    <memberTool name="import_repather"/>
    <memberTool name="multi_rendering"/>
  </toolshelf>

  <tool name="center_pivot_extract" label="Center Pivot Extract" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
import sys
from imp import reload

import hou

psj_dir = hou.hscriptExpression('$PSJ_SITE')

sys.path.append( os.path.join(psj_dir, 
                'script', 
                'center_pivot_extract').replace('\\', '/') )

import center_pivot_extract
reload(center_pivot_extract)

center_pivot_extract.load()]]></script>
  </tool>

  <tool name="prim_spliter" label="Prim Spliter" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
import sys
from imp import reload

import hou

psj_dir = hou.hscriptExpression('$PSJ_SITE')

sys.path.append( os.path.join(psj_dir, 
                'script', 
                'prim_spliter').replace('\\', '/') )

import prim_spliter
reload(prim_spliter)

prim_input = hou.ui.readInput( 'enter the prim attrib', 
                                buttons=("OK", "Cancel"), title='prim Spliter' )

if prim_input[0] == 0:
    prim_spliter.load( prim_input[1] )]]></script>
  </tool>

  <tool name="point_spliter" label="Point Spliter" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
import sys
from imp import reload

import hou

psj_dir = hou.hscriptExpression('$PSJ_SITE')

sys.path.append( os.path.join(psj_dir, 
                'script', 
                'point_spliter').replace('\\', '/') )

import point_spliter
reload(point_spliter)

point_input = hou.ui.readInput( 'enter the point attrib', 
                                buttons=("OK", "Cancel"), title='point Spliter' )

if point_input[0] == 0:
    point_spliter.load( point_input[1] )]]></script>
  </tool>

  <tool name="memory_clear" label="Memory Clear" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
import sys
from imp import reload

import hou

psj_dir = hou.hscriptExpression('$PSJ_SITE')

sys.path.append( os.path.join(psj_dir, 
                'script', 
                'memory_clear').replace('\\', '/') )

import memory_clear
reload(memory_clear)

memory_clear.load()]]></script>
  </tool>

  <tool name="import_repather" label="Import Repather" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
import sys
from imp import reload
import hou
from PySide2 import QtCore

psj_dir = hou.hscriptExpression('$PSJ_SITE')

sys.path.append( os.path.join(psj_dir, 
                'script', 
                'import_repath').replace('\\', '/') )

import import_repath
reload( import_repath )

if hou.selectedNodes():
    win = import_repath.ImportRepath( hou.selectedNodes() )
    win.ui.setParent( hou.ui.mainQtWindow(), QtCore.Qt.Window )
    win.ui.show()

else:
    hou.ui.displayMessage( 'Select the node plz', 
                        severity=hou.severityType.Error )]]></script>
  </tool>

  <tool name="multi_rendering" label="Multi Rendering" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import os
import sys
import json
from imp import reload
import hou
from PySide2 import QtCore

psj_dir = hou.hscriptExpression('$PSJ_SITE')

multi_rendering_dir = os.path.join(psj_dir, 
                                    'script', 
                                    'multi_rendering').replace('\\', '/') 

sys.path.append( multi_rendering_dir )
import multi_rendering
reload( multi_rendering )

hipfile = os.path.splitext( os.path.basename(hou.hipFile.path()) )[0]

preset_json_file = os.path.join( multi_rendering_dir, 
                                '.preset', 
                                f'{hipfile}.json' ).replace('\\', '/')

if os.path.exists( preset_json_file ):
    with open( preset_json_file, 'r' ) as file:
        preset_dict = json.load( file )
else:
    preset_dict = None

win = multi_rendering.MultiRendering( preset_dict )
win.ui.setParent( hou.ui.mainQtWindow(), QtCore.Qt.Window )
win.ui.show()

]]></script>
  </tool>
</shelfDocument>
